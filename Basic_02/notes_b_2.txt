----------:AARAY:------
// JavaScript Array Short Notes

1. Initializing Arrays:
   - Arrays in JavaScript can be created using square brackets (`[]`) or the `Array` constructor.
   - Example:
     ```javascript
     const myArr = [2, 3, 4, 5, 6, 7];
     const myArray = new Array(1, 2, 3, 4, 5, 6, 7);
     ```

2. Accessing and Modifying Arrays:
   - Array elements are accessed using square bracket notation.
   - Methods like `pop`, `push`, `shift`, and `unshift` are used to modify arrays.
   - Example:
     ```javascript
     console.log(myArray[1]);
     myArray.pop();   // Removes the last element
     myArray.push(7);  // Adds 7 to the end
     myArray.shift();  // Removes the first element
     myArray.unshift(5);  // Adds 5 to the beginning
     ```

3. `slice` vs `splice`:
   - `slice` creates a new array by extracting a portion of the existing array.
   - `splice` modifies the original array by removing or replacing elements.
   - Example:
     ```javascript
     const myn1 = myArr.slice(1, 3);  // Creates a new array from index 1 to 2 (3 not included)
     const myn2 = myArr.splice(1, 3);  // Removes elements from index 1 to 3 and returns them
     ```

4. Concatenating Arrays:
   - Arrays can be concatenated using the `concat` method or the spread operator (`...`).
   - Example (commented out in the code):
     ```javascript
     // const all_hero = marvel_hero.concat(dc);
     // const all_hero_new = [...marvel_hero, ...dc];
     ```

5. Spread Operator:
   - The spread operator (`...`) is used for expanding elements of an array.
   - Example (commented out in the code):
     ```javascript
     // const all_hero_new = [...marvel_hero, ...dc];
     ```

6. Flattening Nested Arrays:
   - The `flat` method is used to flatten nested arrays.
   - Example (commented out in the code):
     ```javascript
     // const mix = [2, 3, 4, [4, 5, 67, 34, 5], 22, [3, 4, 5], 7, 4, 5];
     // const real_another_array = mix.flat(Infinity);
     ```

7. Checking Array:
   - The `Array.isArray()` method checks if a variable is an array.
   - Example:
     ```javascript
     console.log(Array.isArray("manish_kumar"));  // false
     ```

8. Creating Array from Object:
   - The `Array.from()` method creates an array from an iterable object.
   - Example:
     ```javascript
     console.log(Array.from({ name: "manish" }));  // [ undefined ]
     ```

9. Converting Set of Elements into Array:
   - The `Array.of()` method creates an array from a set of elements.
   - Example:
     ```javascript
     let score_01 = 100;
     let score_02 = 200;
     let score_03 = 300;
     console.log(Array.of(score_01, score_02, score_03));  // [ 100, 200, 300 ]
     ```
   
-----------OBJECT--------

